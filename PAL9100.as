/**UV: 3.5v (max 4.1) / < 350mAWHITE: 3.3v (max 3.8) / < 30mA*/import flash.display.StageDisplayState;import fl.controls.Button;import fl.controls.Slider;import fl.controls.NumericStepper;import fl.controls.CheckBox;import fl.events.SliderEvent;import flash.events.MouseEvent;import com.wcp.*;include 'phidget.as';var globalBrightness = 50;var globalSpeed = 120;_trace = function (msg:String) {	trace(msg);	myConsole.text = msg+"\n"+myConsole.text;};String.prototype.titleCase = function (_input:String=null) {	inputString = (_input==null)?this:_input;	return inputString.split(" ").map(function(element:String, index:int, arr:Array):String{		return element.substr(0, 1).toLocaleUpperCase() + element.substr(1);	}).join(" ");}function goFullScreen(event:Event):void{	if (stage.displayState == StageDisplayState.FULL_SCREEN) {		stage.removeEventListener(Event.ENTER_FRAME,_handleEnterFrame);		trace(stage.displayState);	} else {		stage.displayState=StageDisplayState.FULL_SCREEN;	}}//stage.addEventListener(Event.ENTER_FRAME, goFullScreen)//------------------------------------------------------//INIT ANIMATION ENGINEvar engine = new Engine();var engineHandler = function(e:LightEvent) {	light(e.index,e.brightness);}engine.addEventListener("light",engineHandler);//------------------------------------------------------//GRID CONTROLLERfunction LEDOverHandler(event:MouseEvent):void {	var idx = event.currentTarget.parent.index;	if(event.buttonDown==true) {		trace(idx);		light(idx,100);	}}function LEDOutHandler(event:MouseEvent):void {	var idx = event.currentTarget.parent.index;	light(idx,0);	//trace(idx);}var gridWrapper = new MovieClip();	gridWrapper.x = 690;	gridWrapper.y = 10;addChild(gridWrapper);var gridRef = new Array();var rowRef:MovieClip;// = new MovieClip();var row = 0;var w = 22;var h = 22;var angle = (row*30);//+5+Math.floor(Math.random()*20);for(i=0;i<60;i++) {	if(i%5==0) {		angle = (row*30);//+5+Math.floor(Math.random()*20);		rowRef = new MovieClip();		rowRef.rotation = angle;		rowRef.y = 6*w;		gridWrapper.addChild(rowRef);		row++;	}	var btn = new PalButton(i,w,h);		btn.x = w+((i%5)*(w+2));		btn.y = 0;		btn.lbl.visible = false;		btn.spot.addEventListener(MouseEvent.MOUSE_DOWN, LEDOverHandler);		btn.spot.addEventListener(MouseEvent.MOUSE_OVER, LEDOverHandler);		btn.spot.addEventListener(MouseEvent.MOUSE_UP, LEDOutHandler);		btn.spot.addEventListener(MouseEvent.MOUSE_OUT, LEDOutHandler);	rowRef.addChild(btn);	gridRef.push(btn);}//------------------------------------------------------// /GRID CONTROLLER//------------------------------------------------------// PARAMETER CONTROLSfunction speedHandler(e:SliderEvent):int {	engine.speed = e.value;	speedLabel.text = e.value;}var speedSlider:Slider = new Slider();	speedSlider.move(170, 60);	speedSlider.setSize(200,3);	speedSlider.liveDragging = true;	speedSlider.value = engine.speed;	speedSlider.minimum = 1;	speedSlider.maximum = 600;	speedSlider.snapInterval = 1;	speedSlider.tickInterval = 40;	speedSlider.value = globalSpeed;	speedSlider.addEventListener(SliderEvent.CHANGE, speedHandler);addChild(speedSlider);speedLabel.text = globalSpeed;function brightnessHandler(event:Event):void {	globalBrightness = event.value;//	for(var i=0;i<64;i++) light( i, event.value);//	_trace("Light: "+LEDIndex.value + " = " + event.value);}var brightnessSlider:Slider = new Slider();	brightnessSlider.move(170, 90);	brightnessSlider.setSize(200,30);	brightnessSlider.liveDragging = true;	brightnessSlider.minimum = 0;	brightnessSlider.maximum = 100;	brightnessSlider.snapInterval = 1;	brightnessSlider.tickInterval = 5;	brightnessSlider.value = globalBrightness;	brightnessSlider.addEventListener(SliderEvent.CHANGE, brightnessHandler);addChild(brightnessSlider);var myFormat:TextFormat = new TextFormat();myFormat.font = "_sans";myFormat.size = 10;myFormat.color = 0xFFFFFF; //redfunction loopCheckHandler(e:MouseEvent):void {	engine.loop = e.target.selected;}var loopCheck:CheckBox = new CheckBox();	loopCheck.move(10,105);	loopCheck.label = "loop";	loopCheck.addEventListener(MouseEvent.CLICK, loopCheckHandler);addChild(loopCheck);loopCheck.setStyle("textFormat", myFormat);function randomCheckHandler(e:MouseEvent):void {	engine.randomize = e.target.selected;}var randomCheck:CheckBox = new CheckBox();	randomCheck.move(60,105);	randomCheck.label = "randomize";	randomCheck.textField;	randomCheck.addEventListener(MouseEvent.CLICK, randomCheckHandler);addChild(randomCheck);randomCheck.setStyle("textFormat", myFormat);function trailHandler(event:Event):void {	engine.trail = event.target.value;}var trailControl:NumericStepper = new NumericStepper();	trailControl.setSize(50,20);	trailControl.move(150,105);	trailControl.value = 0;	//trailControl.label = "trails";	trailControl.addEventListener(Event.CHANGE,trailHandler);addChild(trailControl);//------------------------------------------------------//PATTERN TRIGGER BUTTONSvar console:MovieClip = new MovieClip();	console.x = 5;	console.y = 300;addChild(console);var effect = new PalEffect();var hotkeys:Array = new Array("q","w","e","r","t","y","u","i","o","p");var hotKeysMap:Array = new Array();var j = 0;for(var effectName in effect.library) {	if(!effect.library[effectName].hasChannel)		continue;	var channel:Channel = new Channel(effectName,hotkeys[j]);		channel.x = 0;		channel.y = j*45;		channel.addEventListener("effect",engine.listener);//		channel.addEventListener(EffectEvent.CHANGED,engine.listener);	console.addChild(channel);	hotKeysMap[hotkeys[j]] = channel;	j++;}function channelHandler(e:Event) {	trace(e.effectName+":"+e.effect);}//MAGIC BUTTONSfunction wishHandler(e:MouseEvent):void {	engine.go("stars");}var wishButton:Button = new Button();	wishButton.setSize(100,40);	wishButton.move(880,300);	wishButton.label = "Make a wish";	wishButton.addEventListener(MouseEvent.MOUSE_DOWN,wishHandler);addChild(wishButton);function strobeHandler(e:MouseEvent):void {	engine.go("strobe");}var strobeButton:Button = new Button();	strobeButton.setSize(100,40);	strobeButton.move(880,350);	strobeButton.label = "Camera's Ready";	strobeButton.addEventListener(MouseEvent.MOUSE_DOWN,strobeHandler);addChild(strobeButton);//------------------------------------------------------// KEYBOARD HANDLERfunction reportKeyDown(event:KeyboardEvent):void { 	var key = String.fromCharCode(event.charCode);	switch(key) {	case " ":		if(engine.running) {			engine.stop();			blackout();		} else {			engine.loop = loopCheck.selected = true;			engine.go();		}	break;	case "l":		engine.loop = loopCheck.selected = !engine.loop;	break;	case "q":	case "w":	case "e":	case "r":	case "t":	case "y":	case "u":	case "i":	case "o":	case "p":		hotKeysMap[key].go();	break;		case "1":	case "2":	case "3":	case "4":	case "5":	case "6":	case "7":	case "8":	case "9":		globalBrightness = key*10;		brightnessSlider.value = globalBrightness;//		for(i=0;i<64;i++) light( i, globalBrightness);	break;	case "`":		globalBrightness = 0;		brightnessSlider.value = globalBrightness;	break;	case "0":		globalBrightness = 100;		brightnessSlider.value = globalBrightness;	break;	default:		_trace("Key Pressed: " + String.fromCharCode(event.charCode) +         " (character code: " + event.charCode + ")"); 	break;	}} stage.addEventListener(KeyboardEvent.KEY_DOWN, reportKeyDown);