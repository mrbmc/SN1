/**UV: 3.5v (max 4.1) / < 350mAWHITE: 3.3v (max 3.8) / < 30mA*/import flash.display.StageDisplayState;import fl.controls.Button;import fl.controls.Slider;import fl.controls.SliderDirection;import fl.controls.NumericStepper;import fl.controls.CheckBox;import fl.events.SliderEvent;import flash.events.MouseEvent;import com.wcp.*;include 'phidget.as';var globalBrightness = 100;var globalSpeed = 120;_trace = function (o:Object) {	msg = (o is DebugEvent) ? o.msg : o;	trace(msg);	myConsole.text = msg+"\n"+myConsole.text;}String.prototype.titleCase = function (_input:String=null) {	inputString = (_input==null)?this:_input;	return inputString.split(" ").map(function(element:String, index:int, arr:Array):String{		return element.substr(0, 1).toLocaleUpperCase() + element.substr(1);	}).join(" ");}function goFullScreen(event:Event):void{	if (stage.displayState == StageDisplayState.FULL_SCREEN) {		stage.removeEventListener(Event.ENTER_FRAME,_handleEnterFrame);		trace(stage.displayState);	} else {		stage.displayState=StageDisplayState.FULL_SCREEN;	}}//stage.addEventListener(Event.ENTER_FRAME, goFullScreen)//------------------------------------------------------//INIT ANIMATION ENGINEvar engine = new Engine();var sequencer = new Sequencer();addEventListener("light",light);engine.addEventListener("light",light);engine.addEventListener("debug",_trace);engine.addEventListener("effect",sequencer.listener);sequencer.addEventListener("effect",engine.listener);//------------------------------------------------------//GRID CONTROLLERfunction LEDOverHandler(event:MouseEvent):void {	var idx = event.currentTarget.parent.index;	if(event.buttonDown==true) {		_trace(idx);		//light(idx,100);		dispatchEvent(new LightEvent(idx,100));	}}function LEDOutHandler(event:MouseEvent):void {	var idx = event.currentTarget.parent.index;	//light(idx,0);	dispatchEvent(new LightEvent(idx,0));}var gridWrapper = new MovieClip();	gridWrapper.x = 874;	gridWrapper.y = 5;addChild(gridWrapper);var gridRef = new Array();var rowRef:MovieClip;// = new MovieClip();var row = 0;var w = 22;var h = 22;var angle = (row*30);//+5+Math.floor(Math.random()*20);for(i=0;i<60;i++) {	if(i%5==0) {		angle = (row*30);//+5+Math.floor(Math.random()*20);		rowRef = new MovieClip();		rowRef.rotation = angle;		rowRef.y = 6*w;		gridWrapper.addChild(rowRef);		row++;	}	var btn = new PalButton(i,w,h);		btn.x = w+((i%5)*(w+2));		btn.y = 0;		btn.lbl.visible = false;		//btn.rotation = -angle;		btn.spot.addEventListener(MouseEvent.MOUSE_DOWN, LEDOverHandler);		btn.spot.addEventListener(MouseEvent.MOUSE_OVER, LEDOverHandler);		btn.spot.addEventListener(MouseEvent.MOUSE_UP, LEDOutHandler);		btn.spot.addEventListener(MouseEvent.MOUSE_OUT, LEDOutHandler);	rowRef.addChild(btn);	gridRef.push(btn);}for(i=60;i<64;i++) {	btn = new PalButton(i,w,h,0x6600FF);	btn.x = ((i%2)*220)-120;	btn.y = (Math.floor((i-60)/2)*200)+20;//((i%2)*200)-100;	btn.alpha = 0;	gridWrapper.addChild(btn);	gridRef.push(btn);}//------------------------------------------------------// /GRID CONTROLLER//------------------------------------------------------// PARAMETER CONTROLSfunction speedHandler(e:SliderEvent):int {	engine.speed = e.value;	speedLabel.text = e.value;}function speedInputHandler(e:Event):int {	//trace(e);	engine.speed = e.value;	speedSlider.value = e.value;}var speedSlider:Slider = new Slider();	speedSlider.move(10,220);	speedSlider.setSize(300,3);	speedSlider.liveDragging = true;	speedSlider.value = engine.speed;	speedSlider.minimum = 1;	speedSlider.maximum = 600;	speedSlider.snapInterval = 1;	speedSlider.tickInterval = 40;	speedSlider.value = globalSpeed;	//speedSlider.direction = SliderDirection.VERTICAL;	speedSlider.addEventListener(SliderEvent.CHANGE, speedHandler);addChild(speedSlider);speedLabel.text = globalSpeed;function brightnessHandler(event:Event):void {	globalBrightness = event.value;	volumeLabel.text = globalBrightness;//	for(var i=0;i<64;i++) light( i, event.value);//	_trace("Light: "+LEDIndex.value + " = " + event.value);}var brightnessSlider:Slider = new Slider();	brightnessSlider.move(10,180);	brightnessSlider.setSize(300,20);	brightnessSlider.liveDragging = true;	brightnessSlider.minimum = 0;	brightnessSlider.maximum = 100;	brightnessSlider.snapInterval = 1;	brightnessSlider.tickInterval = 5;	brightnessSlider.value = globalBrightness;	//brightnessSlider.direction = SliderDirection.VERTICAL;	brightnessSlider.addEventListener(SliderEvent.CHANGE, brightnessHandler);addChild(brightnessSlider);volumeLabel.text = globalBrightness;var myFormat:TextFormat = new TextFormat();myFormat.font = "_sans";myFormat.size = 10;myFormat.color = 0xFFFFFF; //redvar loopControl:CheckBox = new CheckBox();	loopControl.move(10,250);	loopControl.label = "loop";	loopControl.addEventListener(MouseEvent.CLICK, parameterHandler);	loopControl.setStyle("textFormat", myFormat);addChild(loopControl);var randomControl:CheckBox = new CheckBox();/*	randomControl.move(loopControl.x+80,loopControl.y);	randomControl.label = "randomize";	randomControl.textField.autoSize = TextFieldAutoSize.LEFT;	randomControl.addEventListener(MouseEvent.CLICK, parameterHandler);	randomControl.setStyle("textFormat", myFormat);addChild(randomControl);*/var reflectControl:CheckBox = new CheckBox();	reflectControl.move(randomControl.x+80,loopControl.y);	reflectControl.label = "reflect";	reflectControl.textField.autoSize = TextFieldAutoSize.LEFT;	reflectControl.addEventListener(MouseEvent.CLICK, parameterHandler);	reflectControl.setStyle("textFormat", myFormat);addChild(reflectControl);var reverseControl:CheckBox = new CheckBox();	reverseControl.move(reflectControl.x+80,loopControl.y);	reverseControl.label = "reverse";	reverseControl.textField.autoSize = TextFieldAutoSize.LEFT;	reverseControl.addEventListener(MouseEvent.CLICK, parameterHandler);	reverseControl.setStyle("textFormat", myFormat);addChild(reverseControl);var trailControl:NumericStepper = new NumericStepper();	trailControl.setSize(50,20);	trailControl.move(reverseControl.x+80,loopControl.y);	trailControl.value = 0;	//trailControl.label = "trails";	trailControl.addEventListener(Event.CHANGE,parameterHandler);addChild(trailControl);function parameterHandler(e:Event):void {	engine.loop = loopControl.selected;	engine.randomize = randomControl.selected;	engine.reflect = reflectControl.selected;	engine.reverse = reverseControl.selected;	engine.trail = trailControl.value;}function playerHandler(e:Event) {	switch(e.target.name) {		case "playButton":			if(!sequencer.hasItems())				return;			sequencer.go(true);			playButton.visible = false;		break;		case "stopButton":			sequencer.go(false);			playButton.visible = true;		break;		case "backButton":			sequencer.go();		break;		case "nextButton":			sequencer.stepper();		break;	}}playButton.addEventListener(MouseEvent.CLICK,playerHandler);stopButton.addEventListener(MouseEvent.CLICK,playerHandler);backButton.addEventListener(MouseEvent.CLICK,playerHandler);nextButton.addEventListener(MouseEvent.CLICK,playerHandler);//------------------------------------------------------//EFFECT CONSOLEvar console:MovieClip = new MovieClip();	console.x = 5;	console.y = 315;addChild(console);var effects:EffectFactory = new EffectFactory();var hotkeys:Array = new Array("q","w","e","r","t","y","u","i","o","p");var hotKeysMap:Array = new Array();var j = 0;for(var effectName in effects.library) {	if(!effects.library[effectName].hasChannel)		continue;	var channel:Channel = new Channel(effectName,hotkeys[j]);		channel.x = 0;		channel.y = j*45;		channel.addEventListener("effect",engine.listener);		channel.addEventListener("effect",sequencer.listener);	console.addChild(channel);	hotKeysMap[hotkeys[j]] = channel;	sequencer.addEventListener("effect",channel.queueHandler);	j++;}//------------------------------------------------------//MAGIC BUTTONSvar starIndex = 0;var starArray = new Array(6,10,7,0,8,5,9,2,4,3,11,1);function wishHandler(e:MouseEvent):void {	var fx = effects.make("stars");		fx.sequence = new Array();	//for(i=0;i<16;i++) fx.sequence.push(new Array());	//var star = Math.floor(Math.random()*12)*5;	var star = starArray[starIndex]*5;	trace(star);	for(i=(star+4),end=star;i>=end;i--) {		fx.sequence.push(new Array(i+""));	}	star = (star>=30) ? star-30 : star+30;	//if star-=60;	for(i=star,end=star+5;i<end;i++) {		fx.sequence.push(new Array(i+""));	}	//for(i=0;i<16;i++) fx.sequence.push(new Array());	engine.go(fx);	starIndex++;	if(starIndex>=12) starIndex = 0;}var wishButton:Button = new Button();	wishButton.setSize(100,40);	wishButton.move(1024-112,console.y);	wishButton.label = "Make a wish";	wishButton.addEventListener(MouseEvent.MOUSE_DOWN,wishHandler);addChild(wishButton);function strobeHandler(e:MouseEvent):void {	engine.go(effects.make("strobe"));}var strobeButton:Button = new Button();	strobeButton.setSize(100,40);	strobeButton.move(wishButton.x,console.y+50);	strobeButton.label = "Camera's Ready";	strobeButton.addEventListener(MouseEvent.MOUSE_DOWN,strobeHandler);addChild(strobeButton);function ballHandler(e:MouseEvent):void {	engine.go(effects.make("discoball"));}var ballButton:Button = new Button();	ballButton.setSize(100,40);	ballButton.move(wishButton.x,console.y+100);	ballButton.label = "discoball";	ballButton.addEventListener(MouseEvent.MOUSE_DOWN,ballHandler);addChild(ballButton);function uvHandler(e:SliderEvent):int {	//var uv:Array = new Array(new Array());	for(i=60;i<64;i++) {		dispatchEvent(new LightEvent(i,e.value,null));		gridRef[i].lite.alpha = 0;		gridRef[i].alpha = e.value/100;	}}var uvSlider:Slider = new Slider();	uvSlider.move(wishButton.x+50,console.y+160);	uvSlider.setSize(100,10);	uvSlider.liveDragging = true;	uvSlider.value = engine.speed;	uvSlider.minimum = 0;	uvSlider.maximum = 100;	uvSlider.snapInterval = 1;	uvSlider.tickInterval = 10;	uvSlider.value = 0;	uvSlider.direction = SliderDirection.VERTICAL;	uvSlider.addEventListener(SliderEvent.CHANGE, uvHandler);addChild(uvSlider);function blackHandler(e:Event):void {	engine.blackout();	blackout();}var BlackButton:Button = new Button();	BlackButton.setSize(100,40);	BlackButton.move(wishButton.x,console.y+360);	BlackButton.label = "blackout";	BlackButton.addEventListener(MouseEvent.MOUSE_DOWN,blackHandler);addChild(BlackButton);sequencer.addEventListener("blackout",blackHandler);//------------------------------------------------------// KEYBOARD HANDLERfunction reportKeyDown(event:KeyboardEvent):void { 	var key = String.fromCharCode(event.charCode);	switch(key) {	case " ":		sequencer.go();	break;	case "z":		engine.go(engine.fx);	break;	case "x":		sequencer.stepper();	break;	case "l":		engine.loop = loopControl.selected = !engine.loop;	break;	case "q":	case "w":	case "e":	case "r":	case "t":	case "y":	case "u":	case "i":	case "o":	case "p":		hotKeysMap[key].go();	break;	case "b":		engine.go(effects.make("discoball"));	break;	case "m":		engine.go(effects.make("strobe"));	break;		case "1":	case "2":	case "3":	case "4":	case "5":	case "6":	case "7":	case "8":	case "9":		globalBrightness = key*10;		brightnessSlider.value = globalBrightness;//		for(i=0;i<64;i++) light( i, globalBrightness);	break;	case "`":		globalBrightness = 0;		brightnessSlider.value = globalBrightness;	break;	case "0":		globalBrightness = 100;		brightnessSlider.value = globalBrightness;	break;	default:		_trace("Key Pressed: " + String.fromCharCode(event.charCode) +         " (character code: " + event.charCode + ")"); 	break;	}} stage.addEventListener(KeyboardEvent.KEY_DOWN, reportKeyDown);